numpy>=1.20.0
pandas>=1.3.0
scikit-learn>=1.0.0
tensorflow>=2.8.0
matplotlib>=3.4.0
seaborn>=0.11.0
yfinance>=0.1.70
requests>=2.25.0
python-dotenv>=0.19.0
nltk>=3.6.0
textblob>=0.15.3
transformers>=4.17.0
torch>=1.10.0
plotly>=5.7.0
joblib>=1.1.0
## Key Implementation Files

### 1. Data Collection and Preprocessing
`src/data/collect_stock_data.py`:
```python
import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime, timedelta

def get_stock_data(ticker, start_date, end_date):
    """
    Fetch historical stock data using Yahoo Finance API
    
    Parameters:
    -----------
    ticker : str
        Stock ticker symbol
    start_date : str
        Start date in format 'YYYY-MM-DD'
    end_date : str
        End date in format 'YYYY-MM-DD'
    
    Returns:
    --------
    pandas.DataFrame
        Historical stock data
    """
    try:
        stock_data = yf.download(ticker, start=start_date, end=end_date)
        
        # Check if data was successfully retrieved
        if stock_data.empty:
            print(f"No data found for {ticker} between {start_date} and {end_date}")
            return None
        
        # Reset index to make Date a column
        stock_data = stock_data.reset_index()
        
        # Add additional columns
        stock_data['Return'] = stock_data['Adj Close'].pct_change()
        stock_data['Ticker'] = ticker
        
        # Calculate technical indicators
        # 1. Moving Averages
        stock_data['MA_5'] = stock_data['Adj Close'].rolling(window=5).mean()
        stock_data['MA_20'] = stock_data['Adj Close'].rolling(window=20).mean()
        
        # 2. Relative Strength Index (RSI)
        delta = stock_data['Adj Close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        stock_data['RSI'] = 100 - (100 / (1 + rs))
        
        # 3. Moving Average Convergence Divergence (MACD)
        ema_12 = stock_data['Adj Close'].ewm(span=12, adjust=False).mean()
        ema_26 = stock_data['Adj Close'].ewm(span=26, adjust=False).mean()
        stock_data['MACD'] = ema_12 - ema_26
        stock_data['MACD_Signal'] = stock_data['MACD'].ewm(span=9, adjust=False).mean()
        
        # Remove rows with NaN values from the technical indicator calculations
        stock_data = stock_data.dropna()
        
        print(f"Successfully downloaded {len(stock_data)} records for {ticker}")
        return stock_data
    
    except Exception as e:
        print(f"Error fetching data for {ticker}: {e}")
        return None

def get_multiple_stocks(tickers, start_date, end_date):
    """
    Fetch data for multiple stock tickers and combine into one DataFrame
    
    Parameters:
    -----------
    tickers : list
        List of stock ticker symbols
    start_date : str
        Start date in format 'YYYY-MM-DD'
    end_date : str
        End date in format 'YYYY-MM-DD'
    
    Returns:
    --------
    pandas.DataFrame
        Combined historical stock data
    """
    all_stocks = []
    
    for ticker in tickers:
        stock_data = get_stock_data(ticker, start_date, end_date)
        if stock_data is not None:
            all_stocks.append(stock_data)
    
    if not all_stocks:
        print("No data was collected for any of the tickers")
        return None
    
    # Combine all DataFrames
    combined_data = pd.concat(all_stocks)
    combined_data = combined_data.reset_index(drop=True)
    
    return combined_data

if __name__ == "__main__":
    # Example usage
    tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META']
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=365*2)).strftime('%Y-%m-%d')
    
    stock_data = get_multiple_stocks(tickers, start_date, end_date)
    
    if stock_data is not None:
        # Save to CSV
        stock_data.to_csv('data/raw/stock_data.csv', index=False)
        print(f"Data saved to data/raw/stock_data.csv")
